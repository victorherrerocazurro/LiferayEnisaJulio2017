package com.example.plugins.service.base;

import com.example.plugins.model.Producto;
import com.example.plugins.service.ProductoLocalService;
import com.example.plugins.service.persistence.ProductoPersistence;
import com.example.plugins.service.persistence.PujaPersistence;
import com.example.plugins.service.persistence.SubastaPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the producto local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.example.plugins.service.impl.ProductoLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.example.plugins.service.impl.ProductoLocalServiceImpl
 * @see com.example.plugins.service.ProductoLocalServiceUtil
 * @generated
 */
public abstract class ProductoLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements ProductoLocalService, IdentifiableBean {
    @BeanReference(type = com.example.plugins.service.ProductoLocalService.class)
    protected com.example.plugins.service.ProductoLocalService productoLocalService;
    @BeanReference(type = com.example.plugins.service.ProductoService.class)
    protected com.example.plugins.service.ProductoService productoService;
    @BeanReference(type = ProductoPersistence.class)
    protected ProductoPersistence productoPersistence;
    @BeanReference(type = com.example.plugins.service.PujaLocalService.class)
    protected com.example.plugins.service.PujaLocalService pujaLocalService;
    @BeanReference(type = com.example.plugins.service.PujaService.class)
    protected com.example.plugins.service.PujaService pujaService;
    @BeanReference(type = PujaPersistence.class)
    protected PujaPersistence pujaPersistence;
    @BeanReference(type = com.example.plugins.service.SubastaLocalService.class)
    protected com.example.plugins.service.SubastaLocalService subastaLocalService;
    @BeanReference(type = com.example.plugins.service.SubastaService.class)
    protected com.example.plugins.service.SubastaService subastaService;
    @BeanReference(type = SubastaPersistence.class)
    protected SubastaPersistence subastaPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagLocalService.class)
    protected com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagService.class)
    protected com.liferay.portlet.asset.service.AssetTagService assetTagService;
    @BeanReference(type = AssetTagPersistence.class)
    protected AssetTagPersistence assetTagPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private ProductoLocalServiceClpInvoker _clpInvoker = new ProductoLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.example.plugins.service.ProductoLocalServiceUtil} to access the producto local service.
     */

    /**
     * Adds the producto to the database. Also notifies the appropriate model listeners.
     *
     * @param producto the producto
     * @return the producto that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Producto addProducto(Producto producto) throws SystemException {
        producto.setNew(true);

        return productoPersistence.update(producto);
    }

    /**
     * Creates a new producto with the primary key. Does not add the producto to the database.
     *
     * @param productoId the primary key for the new producto
     * @return the new producto
     */
    @Override
    public Producto createProducto(long productoId) {
        return productoPersistence.create(productoId);
    }

    /**
     * Deletes the producto with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param productoId the primary key of the producto
     * @return the producto that was removed
     * @throws PortalException if a producto with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Producto deleteProducto(long productoId)
        throws PortalException, SystemException {
        return productoPersistence.remove(productoId);
    }

    /**
     * Deletes the producto from the database. Also notifies the appropriate model listeners.
     *
     * @param producto the producto
     * @return the producto that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Producto deleteProducto(Producto producto) throws SystemException {
        return productoPersistence.remove(producto);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Producto.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return productoPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.example.plugins.model.impl.ProductoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return productoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.example.plugins.model.impl.ProductoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return productoPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return productoPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return productoPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Producto fetchProducto(long productoId) throws SystemException {
        return productoPersistence.fetchByPrimaryKey(productoId);
    }

    /**
     * Returns the producto with the matching UUID and company.
     *
     * @param uuid the producto's UUID
     * @param  companyId the primary key of the company
     * @return the matching producto, or <code>null</code> if a matching producto could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Producto fetchProductoByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return productoPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the producto matching the UUID and group.
     *
     * @param uuid the producto's UUID
     * @param groupId the primary key of the group
     * @return the matching producto, or <code>null</code> if a matching producto could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Producto fetchProductoByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return productoPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the producto with the primary key.
     *
     * @param productoId the primary key of the producto
     * @return the producto
     * @throws PortalException if a producto with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Producto getProducto(long productoId)
        throws PortalException, SystemException {
        return productoPersistence.findByPrimaryKey(productoId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return productoPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the producto with the matching UUID and company.
     *
     * @param uuid the producto's UUID
     * @param  companyId the primary key of the company
     * @return the matching producto
     * @throws PortalException if a matching producto could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Producto getProductoByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return productoPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the producto matching the UUID and group.
     *
     * @param uuid the producto's UUID
     * @param groupId the primary key of the group
     * @return the matching producto
     * @throws PortalException if a matching producto could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Producto getProductoByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return productoPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the productos.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.example.plugins.model.impl.ProductoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of productos
     * @param end the upper bound of the range of productos (not inclusive)
     * @return the range of productos
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Producto> getProductos(int start, int end)
        throws SystemException {
        return productoPersistence.findAll(start, end);
    }

    /**
     * Returns the number of productos.
     *
     * @return the number of productos
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getProductosCount() throws SystemException {
        return productoPersistence.countAll();
    }

    /**
     * Updates the producto in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param producto the producto
     * @return the producto that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Producto updateProducto(Producto producto) throws SystemException {
        return productoPersistence.update(producto);
    }

    /**
     * Returns the producto local service.
     *
     * @return the producto local service
     */
    public com.example.plugins.service.ProductoLocalService getProductoLocalService() {
        return productoLocalService;
    }

    /**
     * Sets the producto local service.
     *
     * @param productoLocalService the producto local service
     */
    public void setProductoLocalService(
        com.example.plugins.service.ProductoLocalService productoLocalService) {
        this.productoLocalService = productoLocalService;
    }

    /**
     * Returns the producto remote service.
     *
     * @return the producto remote service
     */
    public com.example.plugins.service.ProductoService getProductoService() {
        return productoService;
    }

    /**
     * Sets the producto remote service.
     *
     * @param productoService the producto remote service
     */
    public void setProductoService(
        com.example.plugins.service.ProductoService productoService) {
        this.productoService = productoService;
    }

    /**
     * Returns the producto persistence.
     *
     * @return the producto persistence
     */
    public ProductoPersistence getProductoPersistence() {
        return productoPersistence;
    }

    /**
     * Sets the producto persistence.
     *
     * @param productoPersistence the producto persistence
     */
    public void setProductoPersistence(ProductoPersistence productoPersistence) {
        this.productoPersistence = productoPersistence;
    }

    /**
     * Returns the puja local service.
     *
     * @return the puja local service
     */
    public com.example.plugins.service.PujaLocalService getPujaLocalService() {
        return pujaLocalService;
    }

    /**
     * Sets the puja local service.
     *
     * @param pujaLocalService the puja local service
     */
    public void setPujaLocalService(
        com.example.plugins.service.PujaLocalService pujaLocalService) {
        this.pujaLocalService = pujaLocalService;
    }

    /**
     * Returns the puja remote service.
     *
     * @return the puja remote service
     */
    public com.example.plugins.service.PujaService getPujaService() {
        return pujaService;
    }

    /**
     * Sets the puja remote service.
     *
     * @param pujaService the puja remote service
     */
    public void setPujaService(
        com.example.plugins.service.PujaService pujaService) {
        this.pujaService = pujaService;
    }

    /**
     * Returns the puja persistence.
     *
     * @return the puja persistence
     */
    public PujaPersistence getPujaPersistence() {
        return pujaPersistence;
    }

    /**
     * Sets the puja persistence.
     *
     * @param pujaPersistence the puja persistence
     */
    public void setPujaPersistence(PujaPersistence pujaPersistence) {
        this.pujaPersistence = pujaPersistence;
    }

    /**
     * Returns the subasta local service.
     *
     * @return the subasta local service
     */
    public com.example.plugins.service.SubastaLocalService getSubastaLocalService() {
        return subastaLocalService;
    }

    /**
     * Sets the subasta local service.
     *
     * @param subastaLocalService the subasta local service
     */
    public void setSubastaLocalService(
        com.example.plugins.service.SubastaLocalService subastaLocalService) {
        this.subastaLocalService = subastaLocalService;
    }

    /**
     * Returns the subasta remote service.
     *
     * @return the subasta remote service
     */
    public com.example.plugins.service.SubastaService getSubastaService() {
        return subastaService;
    }

    /**
     * Sets the subasta remote service.
     *
     * @param subastaService the subasta remote service
     */
    public void setSubastaService(
        com.example.plugins.service.SubastaService subastaService) {
        this.subastaService = subastaService;
    }

    /**
     * Returns the subasta persistence.
     *
     * @return the subasta persistence
     */
    public SubastaPersistence getSubastaPersistence() {
        return subastaPersistence;
    }

    /**
     * Sets the subasta persistence.
     *
     * @param subastaPersistence the subasta persistence
     */
    public void setSubastaPersistence(SubastaPersistence subastaPersistence) {
        this.subastaPersistence = subastaPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset tag local service.
     *
     * @return the asset tag local service
     */
    public com.liferay.portlet.asset.service.AssetTagLocalService getAssetTagLocalService() {
        return assetTagLocalService;
    }

    /**
     * Sets the asset tag local service.
     *
     * @param assetTagLocalService the asset tag local service
     */
    public void setAssetTagLocalService(
        com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService) {
        this.assetTagLocalService = assetTagLocalService;
    }

    /**
     * Returns the asset tag remote service.
     *
     * @return the asset tag remote service
     */
    public com.liferay.portlet.asset.service.AssetTagService getAssetTagService() {
        return assetTagService;
    }

    /**
     * Sets the asset tag remote service.
     *
     * @param assetTagService the asset tag remote service
     */
    public void setAssetTagService(
        com.liferay.portlet.asset.service.AssetTagService assetTagService) {
        this.assetTagService = assetTagService;
    }

    /**
     * Returns the asset tag persistence.
     *
     * @return the asset tag persistence
     */
    public AssetTagPersistence getAssetTagPersistence() {
        return assetTagPersistence;
    }

    /**
     * Sets the asset tag persistence.
     *
     * @param assetTagPersistence the asset tag persistence
     */
    public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
        this.assetTagPersistence = assetTagPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.example.plugins.model.Producto",
            productoLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.example.plugins.model.Producto");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Producto.class;
    }

    protected String getModelClassName() {
        return Producto.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = productoPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
